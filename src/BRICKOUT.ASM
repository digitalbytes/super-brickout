*************************
* BRICK PLOTTER FOR     *
* SUPER BRICKOUT        *
* OWEN STENSETH         *
*************************

	FCB	105		
BRKPOS	FDB	5185		
TABPOS	RMB	2		
BRKCOU	RMB	1	
COU	RMB	1	
CURLVL	RMB	2		
MENPOS	FDB	4111		
	FCB	2
MEN1	FCB	3

MENDAT	FDB	$C00F
	FDB	$BFF7
	FDB	$400B
	FDB	$400B
	FDB	$BFF7
	FDB	$C00F
** END OF DATA

** PROG STARTS
START	LDX	#TADATA+1	; Reset to the first level
	STX	CURLVL		; Store this as the current level
	STX	TABPOS		; 
START2	LDX	BRKPOS		; Display the current level.
	LDY	CURLVL		
	STY	TABPOS

; Draw the level. 7 rows of 15 bricks.
	LDY	#7		; Rows to draw
LOOP	LDB	#15		; Bricks to draw in the row.
	STB	BRKCOU		
LOOP1	LDU	TABPOS		
	LDA	,U+		; Get the brick value 
	STU	TABPOS		
	LDB	#14		
	MUL			; Determine how far into the sprite table we need to go
	ADDD	#BRICKDA		; Add that to the start of the sprite table.
	TFR	D,U		
	LDB	#7		; Bricks are 7 scan lines high.	
	STB	COU		
LOOP2	LDD	,U		
	STD	,X		
	LEAU	+2,U		; Bricks are 2 bytes wide.
	LEAX	+32,X		; Move to the next scan line.
	DEC	COU		
	BNE	LOOP2		; Draw the next scan line.
	LEAX	-222,X		
	DEC	BRKCOU		
	TST	BRKCOU		
	BNE	LOOP1		; Draw the next brick in the row.	
	LEAX	+226,X		
	LEAY	-1,Y		
	BNE	LOOP		; Draw the next row.	

* Reset the ball position?
	LDA	#164		
	STA	YPOS
	LDA	#102
	STA	YPOS+1
	RTS

* Draw the number of padles?
AGA2	LDB	MEN1
	DECB
	LBEQ	OUT
	STB	MEN1-1
	LDX	#4111
	STX	MENPOS
AGA3	LDX	MENPOS
	LDB	#6
	LDY	#MENDAT
PUTMEN	LDA	,Y+
	STA	,X
	LDA	,Y+
	STA	+1,X
	LEAX	+32,X
	DECB
	BNE	PUTMEN
	LDX	MENPOS
	LEAX	+2,X
	STX	MENPOS
	DEC	MEN1-1
	BNE	AGA3
	LDX	MENPOS
	LEAX	-2,X
	STX	MENPOS
	LBRA	OUT
START5	LBSR	START
	LDX	CURLVL
	LDA	-1,X
	STA	BRKPOS-1
** GAME BEGINS
TOTAL	BSR	AGA2
	BSR	PADD
	TST	LETFAL
	BEQ	NOFAL
	LBSR	STRLET
NOFAL	TST	CATCH
	BEQ	CAT
	LDA	65280
	CMPA	#$FC	* Button press on PS4 controller
*	CMPA	#126 
	BEQ	YAA
	CMPA	#254
	BNE	CAT
YAA	CLR	CATCH
CAT	LDX	POINT
	LEAX	+1,X
	CMPX	#TADATA+(105*20)
	BLO	NOTYET
	LDX	TABPOS
NOTYET	STX	POINT
	LBSR	BALL
	BRA	TOTAL
*************************
* SUPER BRICKOUT  V 1.0 *
* OWEN STENSETH         *
*************************
** DATA FOR PADDLE **
	FCB	0
CATCH	FCB	1
	FCB	192
	FCB	0
	FCB	15
	FCB	159
	FCB	255
	FCB	231
	FCB	32
	FCB	0
	FCB	19
	FCB	32
	FCB	0
	FCB	19
	FCB	159
	FCB	255
	FCB	231
	FCB	192
	FCB	0
	FCB	15
PADD2	FCB	252
	FCB	0
	FCB	0
	FCB	255
	FCB	249
	FCB	255
	FCB	254
	FCB	127
	FCB	242
	FCB	0
	FCB	1
	FCB	63
	FCB	242
	FCB	0
	FCB	1
	FCB	63
	FCB	249
	FCB	255
	FCB	254
	FCB	127
	FCB	252
	FCB	0
	FCB	0
	FCB	255
EVODD	RMB	1
	RMB	1
	RMB	2
OLDPAD	RMB	2
	FCB	1
	FCB	1
PADB	RMB	1	; Paddle Storage
	RMB	1
	FCB	24
	FCB	57
PADEXP	FCB	0	; Expanded Paddle
POINT	FDB	$575A
** END OF PADDLE DATA **

PADD	JSR	[$A00A]
	LDB	$15A
	CMPB	#1
	BHI	NO
	LDB	#2
	STB	$15A
	CLR	EVODD
NO	CMPB	PADB+3
	BLO	NO1
	LDB	PADB+3
	DECB
	STB	$15A
	CLR	EVODD
NO1	ANDB	#1
	STB	EVODD
	LDB	$15A
	LSLB
	LSLB
	SUBB	#6
	STB	PADB
	ADDB	#6
	ADDB	PADB+2
	STB	PADB+1
	SUBB	PADB+2
	LDA	#172
	LBSR	CALC
	CLR	OFS+1
	TFR	D,Y
	TST	OLDPAD+2
	BNE	NOOL 
	CMPY	OLDPAD
	BNE	NOOL
	LDB	EVODD
	CMPB	EVODD+1
	BNE	NOOL
	LDA	#1
	STA	OFS+1
	BRA	NOOUT
NOOL	JSR	CLEAR2
NOOUT	STY	OLDPAD-2
	TST	EVODD
	BEQ	EVEN
	LDX	#PADD2
	BRA	PUTPAD
EVEN	LDX	#CATCH+1
PUTPAD	LDB	#6
	STB	COU
PUT3	LDD	,X++
	STD	,Y
	TST	PADB+4
	BEQ	EXPD1
	STB	+2,Y
	STB	+3,Y
EXPD1	TST	EVODD
	BNE	ODD
	LDB	,X+
	TST	PADB+4
	BEQ	EXPD2
	STB	+4,Y
	BRA	FINI
EXPD2	STB	+2,Y
	BRA	FINI
ODD	LDD	,X++
	TST	PADB+4
	BEQ	EXPD4
	STD	+4,Y
	
	BRA	FINI
EXPD4	STD	+2,Y
FINI	LEAY	+32,Y
	DEC	COU
	BNE	PUT3
	LDY	OLDPAD-2
	STY	OLDPAD
	CLR	OLDPAD+2
	LDA	EVODD
	STA	EVODD+1
	TST	OLDPAD+3
	BEQ	NFIR
	LDB	PADB
	ADDB	#5
	STB	YPOS+1
NFIR	RTS
CLEAR2	LDX	#$22A1+32*6
	LDU	#$FFFF
	LDB	#15
CLEAR3	STU	,X++
	DECB
	BNE	CLEAR3
	LEAX	+2,X
	CMPX	#$24E0
	BHI	OUT
	LDB	#15
	BRA	CLEAR3
OUT	RTS
*************************
* BALL MOVER FOR SUPER  *
* BRICKOUT V1.0         *
* BY OWEN STENSETH      *
*************************


** DATA USED BY PROG

BALPOS	RMB	2
	RMB	2
	RMB	1
	FCB	0
	RMB	14
	FCB	0
YPOS	FCB	0
	FCB	0
SPEED	FDB	$0400
BALLDA	FDB	$C7FF
	FDB	$BBFF
	FDB	$7DFF
	FDB	$7DFF
	FDB	$BBFF
	FDB	$C7FF
	FDB	$E3FF
	FDB	$DDFF
	FDB	$BEFF
	FDB	$BEFF
	FDB	$DDFF
	FDB	$E3FF
	FDB	$F1FF
	FDB	$EEFF
	FDB	$DF7F
	FDB	$DF7F
	FDB	$EEFF
	FDB	$F1FF
	FDB	$F8FF
	FDB	$F77F
	FDB	$EFBF
	FDB	$EFBF
	FDB	$F77F
	FDB	$F8FF
	FDB	$FC7F
	FDB	$FBBF
	FDB	$F7DF
	FDB	$F7DF
	FDB	$FBBF
	FDB	$FC7F
	FDB	$FE3F
	FDB	$FDDF
	FDB	$FBEF
	FDB	$FBEF
	FDB	$FDDF
	FDB	$FE3F
	FDB	$FF1F
	FDB	$FEEF
	FDB	$FDF7
	FDB	$FDF7
	FDB	$FEEF
	FDB	$FF1F
	FDB	$FF8F
	FDB	$FF77
	FDB	$FEFB
	FDB	$FEFB
	FDB	$FF77
	FDB	$FF8F

** END OF DATA (THANK GOD)

CALC	LSRA
	RORB
	LSRA
	RORB
	LSRA
	RORB
	ADDD	#$E00
	RTS
BALL	TST	OLDPAD+3
	BNE	FIRUP
AGAIN	LDX	YPOS+2
AGA	LEAX	-1,X
	CMPX	#0
	BNE	AGA
** GET SCREEN
	LDB	#6
	LDX	#BALPOS+6
	LDY	BALPOS+2
PUT1	LDA	,X+
	STA	,Y
	LDA	BALPOS+4
	CMPA	#1
	BHI	OK
	LEAX	+1,X
	BRA	FIN1
OK	LDA	,X+
	STA	+1,Y
FIN1	LEAY	+32,Y
	DECB
	BNE	PUT1
FIRUP	CLR	OLDPAD+3
	LDD	YPOS
	BSR	CALC
	STD	BALPOS
	STD	BALPOS+2
	TFR	D,X
	LDB	#6
	LDY	#BALPOS+6
PUT2	LDA	,X
	STA	,Y+
	LDA	+1,X
	STA	,Y+
	LEAX	+32,X
	DECB
	BNE	PUT2
	LDX	BALPOS
	LDB	YPOS+1
	ANDB	#7
	STB	BALPOS+4
	LDA	#12
	MUL
	ADDD	#YPOS+4
	TFR	D,Y
	LDB	#6
	STB	COU
PUTUP	LDA	,Y+
	STA	,X
	LDB	BALPOS+4
	CMPB	#1
	BLS	TOP
	LDA	,Y+
	STA	+1,X
	BRA	TOP2
TOP	LEAY	+1,Y
TOP2	LEAX	+32,X
	DEC	COU
	BNE	PUTUP
	LDA	YPOS
	CMPA	#107
	LBHS	NUM25
	TST	BALPOS+5
	BEQ	NUM2
	LDX	BALPOS
	LEAX	-32,X
NUM2	LDA	YPOS
	CMPA	#107
	LBHS	NUM25
	LDB	BALPOS+4
	CMPB	#5
	BLO	TW
	LEAX	+1,X
	LDA	,X
	CMPA	#$FF
	BNE	TWO
	LEAX	-1,X
	BRA	TWO
TW	LDA	,X
	CMPA	#$FF
	BNE	TWO
	CMPB	#1
	BLS	TWO
	LEAX	+1,X
TWO	LDA	,X
	CMPA	#$FF
	LBEQ	NUM25
	CMPA	#0
	BNE	TES
	LDX	YPOS+2
	LEAX	-256,X
	CMPX	TADATA-4
	LBLS	NUM3
	STX	YPOS+2
	BRA	NUM3
TES	CMPA	#128
	BEQ	NUM41
	CMPA	#1
	BEQ	NUM4
	RTS
NUM4	LEAX	-1,X
	LDA	,X
	CMPA	#$FF
	BNE	NUM41
	LEAX	+1,X
NUM41	TST	BALPOS+5
	BEQ	HER
	LEAX	-192,X
HER	BSR	NUM42
	BRA	NUM3
NUM42	LDA	#$FF
	LDB	#7
LOOP41	STX	POIF
	TST	LETFAL
	BNE	LOOP14
	LDX	POINT
	LDA	,X
	CMPA	#4
	BLS	LOOP14
	SUBA	#5
	INCA
	CMPA	TADATA-1
	BEQ	LOOP14
	STA	LETFAL
	STA	TADATA-1
FAS	LDX	POIF
FAS2	LEAX	+32,X
	CMPX	#$1BE1
	BLO	FAS2
	STX	LETPOS
	CLR	PADPS
LOOP14	LDX	POIF
LOOP24	LDA	#$FF
	STA	,X
	STA	+1,X
	LEAX	+32,X
	DECB
	BNE	LOOP24
	LDB	#13
	LDX	#BALPOS+6
CLA	STA	,X+
	DECB
	BNE	CLA
	LDY	#3769
	LBSR	INCSCR
	DEC	BRKPOS-1
	LBEQ	BREAK2
	RTS
POIF	RMB	2
NUM3	TST	BALPOS+5
	BEQ	NUM31
	CLR	BALPOS+5
	LBRA	VMOVE
	CLR	BALPOS+5
	LBRA	VMOVE
NUM31	INC	BALPOS+5
	LBRA	VMOVE
NUM25	TST	CATCH
	LBNE	GOAGA
	TST	BALPOS+5
	BEQ	NUM251
	DEC	YPOS
	LDX	BALPOS
	LEAX	-32,X
	STX	BALPOS
	LBRA	VMOVE
NUM251	LDB	YPOS
	INCB
	STB	YPOS
	CMPB	#165
	BHS	YUP
	LDX	BALPOS
NOPROB	LEAX	+32,X
	STX	BALPOS
	LBRA	VMOVE
OFS	FCB	8
	FCB	0
YUP	LDB	YPOS+1
	CMPB	PADB
	LBLO	KILMAN
	CMPB	PADB+1
	LBHI	KILMAN
	TST	OFS+1
	BEQ	OW
	LDB	#1
	STB	TADATA-2
OW	LDB	PADB
	ADDB	#5
	CMPB	YPOS+1
	LBHS	NUM3
	LDB	PADB+1
	SUBB	#5
	CMPB	YPOS+1
	LBLS	NUM3
	TST	CATCH-1
	BEQ	NOCAU
	LDB	#1
	STB	BALPOS+5
	STB	CATCH
	LDB	YPOS+1
	SUBB	PADB
	STB	OFS
	ADDB	PADB
	STB	YPOS+1
	RTS
NOCAU	LBRA	NUM3
GOAGA	LDB	OFS
	ADDB	PADB
	CMPB	8
	BHS	NOL1
	LDB	#8
NOL1	STB	YPOS+1
	RTS
VMOVE	CLR	CATCH
	LDB	YPOS
	CMPB	#107
	LBLO	VMOVE2
	LDX	#BALPOS+6
	LDA	#$FF
LK1	STA	,X+
	CMPX	#YPOS-1
	BNE	LK1
	LBRA	MOVE01
VMOVE2	LDB	BALPOS+4
	CMPB	#1
	LBHI	MOVE01
	LDX	BALPOS
	TST	YPOS-1
	BEQ	PLUS
	LEAX	-1,X
	BRA	PLU
PLUS	LEAX	+1,X
PLU	LDB	#6
AP	LDA	,X
	CMPA	#$FF
	BNE	NOP
	LEAX	+32,X
	DECB
	BNE	AP
	BRA	MOVE01
NOP	TST	YPOS-1
	BEQ	NOP2
	LEAX	-1,X
NOP2	LDA	,X
	CMPA	#0
	BEQ	AE
	LDA	+32,X
	CMPA	#$FF
	BNE	AE
	LEAX	-192,X
	LBSR	NUM42
	BRA	CNGDID
AE	LDB	#6
AE1	LDA	,X
	CMPA	#0
	BEQ	CNGDID
	CMPA	#128
	BEQ	AD
	LEAX	-32,X
	BRA	AE1
AD	LBSR	NUM42
	BRA	CNGDID
** HERE
CNGDID	TST	YPOS-1
	BEQ	RIGH
	CLR	YPOS-1
	LDB	#2
	STB	TADATA-2
	RTS
RIGH	INC	YPOS-1
	RTS
MOVE01	TST	YPOS-1
	BEQ	RIG
	LDB	YPOS+1
	SUBB	TADATA-2
	CMPB	#10
	BHI	NOPR
	BRA	CNGDID
RIG	LDB	YPOS+1
	ADDB	TADATA-2
	CMPB	#240
	BHS	CNGDID
NOPR	STB	YPOS+1
	RTS
KILMAN	LDX	MENPOS
	DEC	MEN1
	BEQ	OUTMAN
	LDA	#$FF
	LDB	#6
CLSMAN	STA	,X
	STA	+1,X
	LEAX	+32,X
	DECB
	BNE	CLSMAN
	LDX	MENPOS
	LEAX	-2,X
	STX	MENPOS
	LDX	#$2281
	LBSR	CLRSCN
	LDB	#1
	STB	CATCH
	STB	OLDPAD+2
	STB	OLDPAD+3
	LDB	#165
	STB	YPOS
	RTS
OUTMAN	JMP	GAME
** EXPAND
LETDAT	FDB	$C1CF	
	FDB	$CFC3
	FDB	$CFCF
	FCB	$C1
** CATCH
	FDB	$C79B
	FDB	$9F9F
	FDB	$9F9B
	FCB	$C7
** BREAK
	FDB	$8399	
	FDB	$9983
	FDB	$9999
	FCB	$83
** S
	FDB	$C399
	FDB	$8FC3
	FDB	$F199
	FCB	$C3
** P (EXTRA PADDEL)
	FDB	$8399
	FDB	$9983
	FDB	$9F9F
	FCB	$9F
LETPOS	FDB	$E11 
LETPS	FCB	102
LETFAL	FCB	0
PADPS	FCB	0
STRLET	LDA	LETFAL
	DECA
	LDB	#7
	MUL
	ADDD	#LETDAT
	TFR	D,X
	LDY	LETPOS
	LDA	#$FF
	STA	,Y
	LEAY	+32,Y
	INC	PADPS
	LDB	PADPS
	CMPB	#54
	LBHS	FINISH
	STY	LETPOS
	LDB	#7
PUTLET	LDA	,X+
	STA	,Y
	LEAY	+32,Y
	DECB
	BNE	PUTLET
	RTS
FINISH	LDX	LETPOS
	LEAX	+256,X
	LDA	,X
	CMPA	#$FF
	LBEQ	MISS
	CLR	CATCH
	CLR	CATCH-1
	CLR	PADB+4
	LDB	#24
	STB	PADB+2
	LDB	#57
	STB	PADB+3
	LBSR	CLRLET
	LDB	#1
	STB	OLDPAD+2
	LDB	LETFAL
	DECB
	BEQ	EXPND
	CMPB	#1
	BEQ	CATCH2
	CMPB	#2
	LBEQ	BREAK2
	CMPB	#3
	BEQ	SLOW
	CMPB	#4
	BEQ	EXTMAN
CATCH2	LDB	#1
	STB	CATCH-1
	BRA	MISS
EXPND	LDB	#1
	STB	PADB+4
	LDB	#40
	STB	PADB+2
	LDB	#53
	STB	PADB+3
	BRA	MISS
SLOW	LDX	#$800
	STX	YPOS+2
	BRA	MISS
BREAK2	LDX	CURLVL
	LEAX	+106,X
	STX	CURLVL
	LDA	-1,X
	STA	BRKPOS-1
	LDA	#1
	STA	CATCH
	STA	OLDPAD+2
	STA	OLDPAD+3
	LDA	#165
	STA	YPOS
	LDX	#$11A1
	LBSR	CLRSCN
	LBSR	START2
	LDX	TADATA-4
	LEAX	-256,X
	CMPX	#0
	BEQ	MISS
	STX	TADATA-4
	BRA	MISS
EXTMAN	LDB	MEN1
	INCB
	CMPB	#9
	BHI	MISS
	STB	MEN1
	BRA	MISS
CLRLET	LDB	#7
	LDA	#$FF
	LDX	LETPOS
CLEBLK	STA	,X
	LEAX	+32,X
	DECB
	BNE	CLEBLK
	RTS
MISS	BSR	CLRLET
	CLR	LETFAL
	RTS

; PLAYER SCORE
; The players score is stored as 16 bit value
; and as 5 separate digits to simplify display handling.
	FDB	0
SCORE	FCB	1,2,3,4,5

; INCREMENT SCORE 
; This routine increments the score by working 
; from the 0 place on the right up to the 
; 10 thousands place rolling the digits up
; adding by 1 to each place and testing if the 
; place reaches 10. It also increments the 16 bit 
; value of the score (presumably used to determine
; if the player got a high score)
INCSCR	LDX	#SCORE+5  	; Start from the 0's place and work backwards.
SCRLOP	LDA	,X 		; Fetch the digit
	INCA			; Add 1 to the score.
	CMPA	#10		; Is it 10
	BNE	STRSCR		; No? Store and display the digit and end the loop leaving
				; the remaining digits alone.
	CLRA			; Set the digit to 0 since we rolled over.
	STA	,X		; Store the digit.
	BSR	PUTNUM		; Draw the digit.
	LEAY	-1,Y		; Change the position for drawing?
	LEAX	-1,X		; Move to the next digit
	CMPX	#SCORE-1		; Are we at the last place?
	BNE	SCRLOP
STRSCR	STA	,X
	BSR	PUTNUM		; 
	LDD	SCORE-2		; There must be a faster way to
	ADDD	#1		; increment a 16 bit value by 1
	STD	SCORE-2		; in memory?
	RTS

;
; Put a number to the screen at the position in on the screen in Y.
;
PUTNUM	PSHS	X,Y,D		; Save registers on the stack.
	CMPA	#0		; Are we drawing 0
	BNE	NUMBE
	LDA	#10
NUMBE	DECA			; 
	TFR	A,B
	CLRA
	ADDD	#NUMDAT		; 
	TFR	D,X
	LDB	#10		; Height of the number is 10
NUMB	LDA	,X		; Get the value of the sprite
	LEAX	+10,X		; Numbers are stored as a sprite graphic of 0123456789?
	STA	,Y		; Store the byte
	LEAY	+32,Y		; Move to the next scan line.
	DECB			; Count down
	BNE	NUMB		; Repeat until 0
	PULS	X,Y,D
	RTS
** WIDTH
** 10
NUMDAT	FCB	$EF
	FCB	$C7
	FCB	$C7
	FCB	$F7
	FCB	$87
	FCB	$E7
	FCB	$83
	FCB	$C7
	FCB	$C7
	FCB	$C7
	FCB	$CF
	FCB	$BB
	FCB	$BB
	FCB	$EF
	FCB	$BF
	FCB	$DF
	FCB	$BB
	FCB	$BB
	FCB	$BB
	FCB	$BB
	FCB	$EF
	FCB	$FB
	FCB	$FB
	FCB	$D7
	FCB	$8F
	FCB	$BF
	FCB	$FB
	FCB	$BB
	FCB	$BB
	FCB	$BB
	FCB	$EF
	FCB	$F7
	FCB	$E7
	FCB	$B7
	FCB	$F7
	FCB	$87
	FCB	$F7
	FCB	$C7
	FCB	$BB
	FCB	$BB
	FCB	$EF
	FCB	$EF
	FCB	$FB
	FCB	$83
	FCB	$FB
	FCB	$BB
	FCB	$F7
	FCB	$BB
	FCB	$C3
	FCB	$BB
	FCB	$EF
	FCB	$DF
	FCB	$FB
	FCB	$F7
	FCB	$FB
	FCB	$BB
	FCB	$EF
	FCB	$BB
	FCB	$FB
	FCB	$BB
	FCB	$EF
	FCB	$BB
	FCB	$FB
	FCB	$F7
	FCB	$FB
	FCB	$BB
	FCB	$EF
	FCB	$BB
	FCB	$F7
	FCB	$BB
	FCB	$C7
	FCB	$83
	FCB	$F7
	FCB	$E3
	FCB	$F7
	FCB	$C7
	FCB	$EF
	FCB	$C7
	FCB	$CF
	FCB	$C7
	FCB	$FF
	FCB	$FF
	FCB	$CF
	FCB	$FF
	FCB	$8F
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
	FCB	$FF
CLRSCN	LDY	#$A00
	LDB	#30
	TFR	X,U
CLRS1	LDA	,X+
	COMA
	STA	-1,X
	DECB
	BNE	CLRS1
CLR2	LEAY	-1,Y
	BNE	CLR2
	TFR	U,X
	LDB	#15
	LDU	#$FFFF
CLR5	STU	,X++
	DECB
	BNE	CLR5
	LEAX	+2,X
	TFR	X,U
	CMPX	#$2520
	BLS	CLRSCN
	RTS
	FDB	$600
	FCB	1
	RMB	1
BRICKDA	FDB	$FFFF
	FDB	$FFFF
	FDB	$FFFF
	FDB	$FFFF
	FDB	$FFFF
	FDB	$FFFF
	FDB	$FFFF
	FCB	128
	FCB	7
	FCB	0
	FCB	3
	FCB	0
	FCB	3
	FCB	0
	FCB	3
	FCB	0
	FCB	3
	FCB	0
	FCB	3
	FCB	128
	FCB	7
	FDB	$8001
	FDB	$7FFE
	FDB	$7FFE
	FDB	$7FFE
	FDB	$7FFE
	FDB	$7FFE
	FDB	$8001
	FDB	$8001
	FDB	0
	FDB	$7FFE
	FDB	0
	FDB	$7FFE
	FDB	0
	FDB	$8001
	FDB	$8001
	FDB	$5554
	FDB	$5554
	FDB	$5554
	FDB	$5554
	FDB	$5554
	FDB	$8001
	FDB	$8001
	FDB	$2AAA
	FDB	$2AAA
	FDB	$2AAA
	FDB	$2AAA
	FDB	$2AAA
	FDB	$8001
	FDB	$8001
	FDB	0
	FDB	0
	FDB	0
	FDB	0
	FDB	0
	FDB	$8001
	FDB	$8001
	FDB	0
	FDB	0
	FDB	0
	FDB	0
	FDB	0
	FDB	$8001
	FDB	$8001
	FDB	0
	FDB	0
	FDB	0
	FDB	0
	FDB	0
	FDB	$8001
	FDB	$8001
	FDB	0
	FDB	0
	FDB	0
	FDB	0
	FDB	0
	FDB	$8001
TADATA	INCLUDE	LVLDAT.ASM	
	END	GAME
